/**
 * Copyright (c) 2011 - 2014, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 *  All rights reserved. This program and the accompanying materials 
 *  are made available under the terms of the Eclipse Public License v1.0 
 *  which accompanies this distribution, and is available at 
 *  http://www.eclipse.org/legal/epl-v10.html 
 * 
 *  Based on ideas from Xtext, Xtend, Xcore
 *    
 *  Contributors:  
 *  		Florian Pirchner - Initial implementation 
 *  
 */
package org.lunifera.dsl.semantic.dto.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.lunifera.dsl.semantic.common.types.LFeature;
import org.lunifera.dsl.semantic.common.types.LType;
import org.lunifera.dsl.semantic.common.types.LTypedPackage;
import org.lunifera.dsl.semantic.common.types.LunTypesPackage;

import org.lunifera.dsl.semantic.common.types.util.LunTypesSwitch;

import org.lunifera.dsl.semantic.dto.LunDtoFactory;

import org.lunifera.dsl.semantic.dto.util.LunDtoAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LunDtoItemProviderAdapterFactory extends LunDtoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LunDtoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoModelItemProvider lDtoModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoModelAdapter() {
		if (lDtoModelItemProvider == null) {
			lDtoModelItemProvider = new LDtoModelItemProvider(this);
		}

		return lDtoModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoItemProvider lDtoItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoAdapter() {
		if (lDtoItemProvider == null) {
			lDtoItemProvider = new LDtoItemProvider(this);
		}

		return lDtoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoMapper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoMapperItemProvider lDtoMapperItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoMapper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoMapperAdapter() {
		if (lDtoMapperItemProvider == null) {
			lDtoMapperItemProvider = new LDtoMapperItemProvider(this);
		}

		return lDtoMapperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoFeatureItemProvider lDtoFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoFeatureAdapter() {
		if (lDtoFeatureItemProvider == null) {
			lDtoFeatureItemProvider = new LDtoFeatureItemProvider(this);
		}

		return lDtoFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoInheritedAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoInheritedAttributeItemProvider lDtoInheritedAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoInheritedAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoInheritedAttributeAdapter() {
		if (lDtoInheritedAttributeItemProvider == null) {
			lDtoInheritedAttributeItemProvider = new LDtoInheritedAttributeItemProvider(this);
		}

		return lDtoInheritedAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoAttributeItemProvider lDtoAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoAttributeAdapter() {
		if (lDtoAttributeItemProvider == null) {
			lDtoAttributeItemProvider = new LDtoAttributeItemProvider(this);
		}

		return lDtoAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoInheritedReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoInheritedReferenceItemProvider lDtoInheritedReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoInheritedReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoInheritedReferenceAdapter() {
		if (lDtoInheritedReferenceItemProvider == null) {
			lDtoInheritedReferenceItemProvider = new LDtoInheritedReferenceItemProvider(this);
		}

		return lDtoInheritedReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoReferenceItemProvider lDtoReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoReferenceAdapter() {
		if (lDtoReferenceItemProvider == null) {
			lDtoReferenceItemProvider = new LDtoReferenceItemProvider(this);
		}

		return lDtoReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.lunifera.dsl.semantic.dto.LDtoOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LDtoOperationItemProvider lDtoOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.lunifera.dsl.semantic.dto.LDtoOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLDtoOperationAdapter() {
		if (lDtoOperationItemProvider == null) {
			lDtoOperationItemProvider = new LDtoOperationItemProvider(this);
		}

		return lDtoOperationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (lDtoModelItemProvider != null) lDtoModelItemProvider.dispose();
		if (lDtoItemProvider != null) lDtoItemProvider.dispose();
		if (lDtoMapperItemProvider != null) lDtoMapperItemProvider.dispose();
		if (lDtoFeatureItemProvider != null) lDtoFeatureItemProvider.dispose();
		if (lDtoInheritedAttributeItemProvider != null) lDtoInheritedAttributeItemProvider.dispose();
		if (lDtoAttributeItemProvider != null) lDtoAttributeItemProvider.dispose();
		if (lDtoInheritedReferenceItemProvider != null) lDtoInheritedReferenceItemProvider.dispose();
		if (lDtoReferenceItemProvider != null) lDtoReferenceItemProvider.dispose();
		if (lDtoOperationItemProvider != null) lDtoOperationItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link LunTypesPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class LunTypesChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends LunTypesSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseLTypedPackage(LTypedPackage object) {
				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPED_PACKAGE__TYPES,
						 LunDtoFactory.eINSTANCE.createLDto()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseLType(LType object) {
				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDto()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoFeature()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoInheritedAttribute()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoAttribute()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoInheritedReference()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoReference()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LTYPE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoOperation()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseLFeature(LFeature object) {
				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDto()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoFeature()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoInheritedAttribute()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoAttribute()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoInheritedReference()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoReference()));

				newChildDescriptors.add
					(createChildParameter
						(LunTypesPackage.Literals.LFEATURE__ANNOTATION_INFO,
						 LunDtoFactory.eINSTANCE.createLDtoOperation()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return DTOEditPlugin.INSTANCE;
		}
	}

}
